#!/bin/bash

LOCAL_PORT=8765
LOCAL_ADDRESS="http://127.0.0.1:$LOCAL_PORT"
REMOTE_ADDRESS_PROD="https://vlevit.org"
REMOTE_ADDRESS_DEV="http://vlevit.org:3205"
LOCAL_SECRET_KEY="$LOCAL_SECRET_KEY"
REMOTE_SECRET_KEY_PROD="$VLEVITORG_SECRET_KEY_PROD"
REMOTE_SECRET_KEY_DEV="$VLEVITORG_SECRET_KEY_DEV"
ANSIBLE_VAULT_PASSWORD_FILE="$VLEVITORG_ANSIBLE_VAULT_PASSWORD_FILE"
PROJECT_DIR=~/projects/vlevit.org
STATIC_DIR="$PROJECT_DIR"/staticfiles
REMOTE_STATIC_DIR=/srv/http/vlevit.org/static
REMOTE_MEDIA_DIR=/srv/http/vlevit.org/media
SSH_DEST=vlevitorg@vlevit.org
SSH_CMD=(ssh "$SSH_DEST")
REMOTE_DEPLOY_DIR_PROD=/srv/http/vlevit.org/vlevit.org
REMOTE_DEPLOY_DIR_DEV=/srv/http/vlevit.org/test.vlevit.org
VIRTUAL_ENV_DIR=~/virtualenvs/vlevit.org
GIT_PUSH_REMOTES=(github)
ORIG_IMAGE_DIR=~/Pictures/blog
DEST_IMAGE_DIR="$PROJECT_DIR"/static/images
DEST_LARGE_IMAGE_DIR="$PROJECT_DIR"/static/images-full
SMALL_IMAGE_SCALE="512x350>"
LARGE_IMAGE_SCALE="1024x700>"
JPEG_QUALITY=90

function usage
{
    cat <<EOF
Usage:

    ${0##*/} help

        print this help message

    ${0##*/} active

        return 0 if dev server is running

    ${0##*/} start

        start dev server

    ${0##*/} stop

        stop dev server

    ${0##*/} restart

        restart dev server

    ${0##*/} reload dev|prod|all

        reload python code by touching wsgi.py

    ${0##*/} update local|dev|prod

        import new and re-import changed posts and pages

    ${0##*/} deploy dev|prod

        deploy master branch to development or production or both

    ${0##*/} publish dev|prod|all

        scale images, collect assets and deploy to development or production or both

    ${0##*/} authorize_gplus

        authorize vlevit.org in Google+

    ${0##*/} export_gplus

        export marked blog posts to Google+ as moments

    ${0##*/} collectstatic

        collect assets and sync them to the server

    ${0##*/} scale_images

        scale down images from $ORIG_IMAGE_DIR and save them to $DEST_IMAGE_DIR and $DEST_LARGE_IMAGE_DIR

    ${0##*/} download_comments

        sync previously exported comments from the server to the local machine

    ${0##*/} view FILE LINE

        open locally the post of the specified file/line in the browser

    ${0##*/} virtualenv

        run eval \`${0##*/} virtualenv\` to activate virtualenv
EOF
}

function run
{
    if vlblog active ; then
        echo "server is already running"
        exit 1
    fi
    cd "$PROJECT_DIR"
    source "$VIRTUAL_ENV_DIR/bin/activate"
    python manage.py runserver "$LOCAL_PORT" &
    echo $! > /tmp/local-server.pid
    deactivate
    wait
}

function stop
{
    if [ -f /tmp/local-server.pid ] ; then
        pid=$(cat /tmp/local-server.pid)
        if pkill -P $pid ; then
            rm /tmp/local-server.pid
            echo "killed successfully" >&2
        else
            echo "error killing local server!" >&2
            return 1
        fi
    elif vlblog active ; then
        echo "kill yourself" >&2
        return 1
    else
        echo "server is not running" >&2
    fi
}

function virtualenv
{
    echo "cd \"$PROJECT_DIR\";"
    echo "source \"$VIRTUAL_ENV_DIR/bin/activate\";"
    echo "export ANSIBLE_VAULT_PASSWORD_FILE=\"$ANSIBLE_VAULT_PASSWORD_FILE\";"
}

function push
{
    cd "$PROJECT_DIR"
    for remote in "${GIT_PUSH_REMOTES[@]}" ; do
        echo git push "$remote" master
        git push "$remote" master
    done
}

function collectstatic
{
    cd "$PROJECT_DIR"
    source "$VIRTUAL_ENV_DIR/bin/activate"
    echo python2 manage.py collectstatic --noinput
    python2 manage.py collectstatic --noinput
    deactivate
    echo rsync -rt "$STATIC_DIR"/ "$SSH_DEST":"$REMOTE_STATIC_DIR"
    rsync -rt "$STATIC_DIR"/ "$SSH_DEST":"$REMOTE_STATIC_DIR"
}

function download_comments
{
    echo rsync -rt vlevitorg@vlevit.org:"$REMOTE_MEDIA_DIR"/comments/ "$PROJECT_DIR"/content/
    rsync -rt vlevitorg@vlevit.org:"$REMOTE_MEDIA_DIR"/comments/ "$PROJECT_DIR"/content/
}

function expand_published
{
    for f in "$@"; do
        sed -i 's|/published: *$|/published: '"$(date --rfc-3339=seconds)"'|g' "$f"
    done
}

function deploy
{
    case "$1" in
        dev) DEPLOY_DIR="$REMOTE_DEPLOY_DIR_DEV";;
        prod) DEPLOY_DIR="$REMOTE_DEPLOY_DIR_PROD";;
        *) echo "usage: deploy [dev|prod]";
            return 1;
            ;;
    esac
    push
    "${SSH_CMD[@]}" '
function prerun
{
    code=$?
    echo "$@"
    if (( $code != 0 )) ; then
        echo "$lastcmd exited with code $code. Aborting..."
        exit $?
    fi
    lastcmd="$@"
}

function run { prerun "$@"; "$@"; }
function runeval { prerun "$@"; eval "$@"; }

run cd '"$DEPLOY_DIR"'/
run git pull origin master
runeval "python -m compileall -f . >/dev/null"
run touch '"$DEPLOY_DIR"'/vlevitorg/wsgi.py
'
    curl_command update "$1"
    # Google+ moments seems broken/deprecated? Disable for now
    # curl_command export_gplus "$1"
}

function image_geometry
{
    image="$1"
    echo "$(identify -verbose "$image" | awk -F : '$1 ~ /Geometry/ {print $2}')"
}

function convert_image
{
    src="$1"
    dst="$2"
    scale="$3"
    args=()

    if [[ ${src##*.} == jpg ]] || [[ ${src##*.} == JPG ]] ; then
        if identify -verbose "$src" | awk -F : '$1 ~ /Quality/ {exit $2<='$JPEG_QUALITY'}'
        then
            args+=(-quality $JPEG_QUALITY)
        fi
    fi
    echo convert "$src" -scale "$scale" "${args[@]}" "$dst" >&2
    convert "$src" -scale "$scale" "${args[@]}" "$dst"
    if [[ ${src##*.} == png ]] || [[ ${src##*.} == PNG ]] ; then
        which pngcrush &>/dev/null && {
            echo pngcrush "$dst" "$dst.1" >&2
            pngcrush "$dst" "$dst.1" &>/dev/null && {
                echo mv "$dst.1" "$dst" >&2
                mv "$dst.1" "$dst"
            }
        }
    fi
}

function scale_images
{
    echo scaling images...
    find "$ORIG_IMAGE_DIR" -type f -iregex ".*\.\(jpg\|png\)" |  grep -v '/\.' |
    while read f
    do
        relf="${f#$ORIG_IMAGE_DIR/}"
        dest="$DEST_IMAGE_DIR/$relf"
        if [[ "$dest" -ot "$f" ]] ; then
            mkdir -p "$DEST_IMAGE_DIR"/"${relf%/*}"
            convert_image "$f" "$dest" "$SMALL_IMAGE_SCALE"
        fi
        dest2="$DEST_LARGE_IMAGE_DIR/$relf"
        if [[ "$dest2" -ot "$f" ]] && [[ $(image_geometry "$f") != $(image_geometry "$dest") ]]
        then
            mkdir -p "$DEST_LARGE_IMAGE_DIR"/"${relf%/*}"
            convert_image "$f" "$dest2" "$LARGE_IMAGE_SCALE"
        fi
    done
}

function view
{
    file="$1"
    line="$2"
    [[ -z $line ]] && line=0

    name="$(awk -F ": *" '{
        if ($0 ~ "/name:") name=$2
        else
            if ($0 ~ /^-----/ && FNR >= '$line')
                {print name; exit}
    }' "$file")"

    [[ -z "$name" ]] && { name="${file##*/}" ; name="${name%.md}"; }

    link="$(sed 's,\(.*/\)blog/\([^/]*\)/\([^/]*\)/.*,\2/blog/\3/'$name'/,' <<< "$file")"
    xdg-open "$LOCAL_ADDRESS/$link"
}

function reload
{
    case "$1" in
        dev) dirs=("$REMOTE_DEPLOY_DIR_DEV");;
        prod) dirs=("$REMOTE_DEPLOY_DIR_PROD");;
        all) dirs=("$REMOTE_DEPLOY_DIR_DEV" "$REMOTE_DEPLOY_DIR_PROD");;
        *) echo "usage: reload [dev|prod|all]";
            return 1;
            ;;
    esac
    for dir in "${dirs[@]}" ; do
        echo "${SSH_CMD[@]}" 'touch '"$dir"'/vlevitorg/wsgi.py'
        "${SSH_CMD[@]}" 'touch '"$dir"'/vlevitorg/wsgi.py'
    done
}

function curl_command
{
    case "$2" in
        "local")
            address="$LOCAL_ADDRESS"
            secret_key="$LOCAL_SECRET_KEY"
            ;;
        "dev")
            address="$REMOTE_ADDRESS_DEV"
            secret_key="$REMOTE_SECRET_KEY_DEV"
            ;;
        "prod")
            address="$REMOTE_ADDRESS_PROD"
            secret_key="$REMOTE_SECRET_KEY_PROD"
            ;;
        *) echo usage: "$1 local|dev|prod" ; return 2 ;;
    esac

    case "$1" in
        "update")
            url="${address}/import/all/?key=${secret_key}"
            ;;
        "import_comments")
            url="${address}/import/comments/?key=${secret_key}"
            ;;
        "export_comments")
            url="${address}/export/comments/?key=${secret_key}"
            ;;
        "export_gplus")
            url="${address}/export/gplus/?key=${secret_key}"
            ;;
        *) echo usage: "update|import_comments|export_comments|export_gplus local|dev|prod" ; return 2 ;;
    esac

    echo curl "$url"
    curl "$url" 2>/dev/null
}

function authorize_gplus
{
    ssh -t "$SSH_DEST" "
echo cd "$REMOTE_DEPLOY_DIR_PROD"
cd "$REMOTE_DEPLOY_DIR_PROD"
echo . ../virtualenv/bin/activate
. ../virtualenv/bin/activate
echo python manage.py authorize_gplus --force
python manage.py authorize_gplus --force"
}

case "$1" in
    active)
        curl --head "$LOCAL_ADDRESS/" &>/dev/null
        exit $(($? != 0))
        ;;
    run|start)
        shift
        run
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        shift
        run "$@"
        ;;
    virtualenv)
        virtualenv
        ;;
    view)
        view "$2" "$3"
        ;;
    reload)
        reload "$2"
        ;;
    update)
        curl_command update "$2"
        ;;
    collectstatic)
        collectstatic
        ;;
    import_comments)
        curl_command import_comments "$2"
        ;;
    export_comments)
        curl_command export_comments "$2"
        ;;
    authorize_gplus)
        authorize_gplus
        ;;
    export_gplus)
        curl_command export_gplus "$2"
        ;;
    download_comments)
        download_comments
        ;;
    expand_published)
        shift
        expand_published "$@"
        ;;
    publish)
        case "$2" in
            prod|dev) DEPLOY=($2) ;;
            all) DEPLOY=(dev prod);;
            *) echo "usage: publish dev|prod|all"; exit 2 ;;
        esac
        scale_images
        collectstatic
        for dep in "${DEPLOY[@]}"; do
            echo "Deploying to $dep..."
            deploy "$dep"
        done
        ;;
    deploy)
        deploy "$2"
        ;;
    scale_images)
        scale_images
        ;;
    help)
        usage
        ;;
    *)
        usage
        exit 2
        ;;
esac
